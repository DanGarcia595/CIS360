package main

import (
	"fmt"
	"time"
)

func main() {

	/*W := [][]int{
		{0, 4, 100, 100, 100, 10, 100},
		{3, 0, 100, 18, 100, 100, 100},
		{100, 6, 0, 100, 100, 100, 100},
		{100, 5, 15, 0, 2, 19, 5},
		{100, 100, 12, 1, 0, 100, 100},
		{100, 100, 100, 100, 100, 0, 10},
		{100, 100, 100, 8, 100, 100, 0},
	}

	P := make([][]int, 7)
	for i := range P {
		P[i] = make([]int, 7)
	}

	D := make([][]int, 7)
	for i := range D {
		D[i] = make([]int, 7)
	}

	floyd2(7, W, D, P)*/

	W2 := [][]int{
		{0, 1, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100},
		{100, 0, 1, 100, 100, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100},
		{100, 100, 0, 1, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100, 100},
		{100, 100, 100, 0, 1, 100, 100, 100, 1, 1, 100, 100, 100, 100, 100},
		{100, 100, 100, 100, 0, 100, 100, 100, 100, 1, 100, 100, 100, 100, 100},
		{1, 100, 100, 100, 100, 0, 1, 100, 100, 100, 100, 1, 100, 100, 100},
		{100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 1, 1, 100, 100},
		{100, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 1, 1, 100},
		{100, 100, 100, 100, 100, 100, 100, 100, 0, 1, 100, 100, 100, 1, 1},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 0, 100, 100, 100, 100, 1},
		{100, 100, 100, 100, 100, 1, 100, 100, 100, 0, 100, 100, 100, 100, 100},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 0, 100, 100, 100},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 0, 100, 100},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 0, 100},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 1, 0},
	}

	P2 := make([][]int, 15)
	for i := range P2 {
		P2[i] = make([]int, 15)
	}

	D2 := make([][]int, 15)
	for i := range D2 {
		D2[i] = make([]int, 15)
	}

	start := time.Now()
	floyd2(15, W2, D2, P2)
	elapsed := time.Since(start)
	fmt.Println(" took: ", elapsed)

	W3 := make([][]int, 15)
	for i := range W3 {
		W3[i] = make([]int, 15)
		for j := 0; j < 15; j++ {
			W3[i][j] = 1
		}
	}

	P3 := make([][]int, 15)
	for i := range P3 {
		P3[i] = make([]int, 15)
	}

	D3 := make([][]int, 15)
	for i := range D3 {
		D3[i] = make([]int, 15)
	}

	start2 := time.Now()
	floyd2(15, W3, D3, P3)
	elapsed2 := time.Since(start2)
	fmt.Println(" took: ", elapsed2)
}

func floyd2(n int, W [][]int, D [][]int, P [][]int) {
	var i, j, k int

	for i = 0; i < n; i++ {
		for j = 0; j < n; j++ {
			P[i][j] = 0
		}
	}
	D = W
	for k = 0; k < n; k++ {
		for i = 0; i < n; i++ {
			for j = 0; j < n; j++ {
				if D[i][k]+D[k][j] < D[i][j] {
					P[i][j] = k + 1
					D[i][j] = D[i][k] + D[k][j]
				}

			}
		}
		fmt.Println("D(", k, "):")
		for i := range D {
			fmt.Println(D[i])
		}
		fmt.Print("\n")
	}

	fmt.Println("Array P:")
	for i := range P {
		fmt.Println(P[i])
	}

	fmt.Println("\nfrom V3 to V1:")
	//path(0, 6, P)
	fmt.Println("\n")

}

func path(q int, r int, P [][]int) {
	if P[q][r] != 0 {
		path(q, P[q][r], P)
		fmt.Print("v", P[q][r]+1)
		path(P[q][r], r, P)
	}

}
